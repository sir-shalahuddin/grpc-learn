basePath: /
definitions:
  dto.GetProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UpdateProfileRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  dto.UpdateUserRoles:
    properties:
      role:
        type: string
    required:
    - role
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  response.ErrorMessage:
    properties:
      error:
        type: boolean
      message:
        type: string
      statusCode:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      message:
        type: string
      statusCode:
        type: integer
    type: object
host: user-rest.sirlearn.my.id
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    API for managing users and profiles
    Login as Super Admin or Librarian with the following credentials:
    - **Super Admin**: `superadmin@mail.com`, Password: `Password123!`
    - **Librarian**: `librarian@mail.com`, Password: `Password123!`
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Service API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieve all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: List all users
      tags:
      - users
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user from the database
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Delete a user
      tags:
      - users
  /admin/users/{id}/roles:
    put:
      consumes:
      - application/json
      description: Update roles of a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated roles data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRoles'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Update user roles
      tags:
      - users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns JWT tokens
      parameters:
      - description: Login Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Failed to login user
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Login user
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes a JWT token and returns a new access token
      parameters:
      - description: Refresh Token Request
        in: body
        name: refreshTokenRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Failed to refresh token
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Refresh JWT Token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email and password
      parameters:
      - description: Register Request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      summary: Register a new user
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Retrieves the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetProfileResponse'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Failed to retrieve user
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates the profile of the authenticated user
      parameters:
      - description: Update Profile Request
        in: body
        name: updateProfileRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "409":
          description: Duplicate email
          schema:
            $ref: '#/definitions/response.ErrorMessage'
        "500":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/response.ErrorMessage'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
